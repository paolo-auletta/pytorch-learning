# -*- coding: utf-8 -*-
"""Multiclass 01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EwtJMJZADdjElPD5P87LDkVU2HewoGe9
"""

import torch
from torch import nn
from sklearn.datasets import make_moons
from sklearn.model_selection import train_test_split

n_samples = 1000
random_state = 42

x, y = make_moons(n_samples = n_samples,
                  noise = 0.07,
                  random_state = random_state)

x = torch.from_numpy(x).type(torch.float)
y = torch.from_numpy(y).type(torch.float)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.20, random_state = random_state)

# Visualize
import matplotlib.pyplot as plt

def plot_predictions(x, y, title):
    """
    This function plots the model's predictions on the test data.
    """

    # Plotting predictions
    plt.figure(figsize=(10, 8))  # Set the figure size for better readability

    # Scatter plot for testing data predictions
    plt.scatter(
        x = x[:, 0],
        y = x[:, 1],
        c = y,
        cmap = plt.cm.coolwarm,
        edgecolor = 'w',
        linewidth = 1,
        s = 70,
        alpha = 0.6,
        label = "Test Predictions",
    )

    # Add a colorbar for predicted labels
    colorbar = plt.colorbar()
    colorbar.set_label(title, fontsize=12)
    colorbar.ax.tick_params(labelsize=10)

    # Titles and labels
    plt.title(title, fontsize=14)
    plt.xlabel("Feature 1", fontsize=12)
    plt.ylabel("Feature 2", fontsize=12)

    # Add legend
    plt.legend(loc="upper right")

    # Show the plot
    plt.tight_layout()
    plt.show()

plot_predictions(x_train, y_train, "Data")

class MultiClassModel(nn.Module):

  def __init__(self, in_features, out_features, hidden_layers = 8):
    super().__init__()

    self.model = nn.Sequential(
        nn.Linear(in_features = in_features, out_features = hidden_layers),
        nn.ReLU(),
        nn.Linear(in_features = hidden_layers, out_features = hidden_layers),
        nn.ReLU(),
        nn.Linear(in_features = hidden_layers, out_features = hidden_layers),
        nn.ReLU(),
        nn.Linear(in_features = hidden_layers, out_features = out_features)
    )

  def forward(self, x):
    return self.model(x)

model_0 = MultiClassModel(2, 1, 16)

loss_fn = nn.BCEWithLogitsLoss()

optimizer = torch.optim.Adam(params = model_0.parameters(),
                            lr = 0.1)

epochs = 100

for epoch in range(epochs):

  model_0.train()

  # Do the forward pass
  y_logits = model_0(x_train).squeeze()

  # Calculate the loss
  loss = loss_fn(y_logits, y_train)

  # Optimizer zero grad
  optimizer.zero_grad()

  # Loss backward
  loss.backward()

  # Optimizer step, step, step
  optimizer.step()

  # Is test time
  model_0.eval()
  with torch.inference_mode():
    # Do the forward pass
    test_logits = model_0(x_test).squeeze()

    # Calculate the loss
    test_loss = loss_fn(test_logits, y_test)

  if epoch % 10 == 0:
    print(f"Epoch: {epoch} | Loss: {loss.item():.4f} | Test Loss: {test_loss.item():.4f}")

# Plot the model predictions

import numpy as np
import matplotlib.pyplot as plt


# TK - this could go in the helper_functions.py and be explained there
def plot_decision_boundary(model, X, y):

    # Put everything to CPU (works better with NumPy + Matplotlib)
    model.to("cpu")
    X, y = X.to("cpu"), y.to("cpu")

    # Source - https://madewithml.com/courses/foundations/neural-networks/
    # (with modifications)
    x_min, x_max = X[:, 0].min() - 0.1, X[:, 0].max() + 0.1
    y_min, y_max = X[:, 1].min() - 0.1, X[:, 1].max() + 0.1
    xx, yy = np.meshgrid(np.linspace(x_min, x_max, 101),
                         np.linspace(y_min, y_max, 101))

    # Make features
    X_to_pred_on = torch.from_numpy(np.column_stack((xx.ravel(), yy.ravel()))).float()

    # Make predictions
    model.eval()
    with torch.inference_mode():
        y_logits = model(X_to_pred_on)

    # Test for multi-class or binary and adjust logits to prediction labels
    if len(torch.unique(y)) > 2:
        y_pred = torch.softmax(y_logits, dim=1).argmax(dim=1) # mutli-class
    else:
        y_pred = torch.round(torch.sigmoid(y_logits)) # binary

    # Reshape preds and plot
    y_pred = y_pred.reshape(xx.shape).detach().numpy()
    plt.contourf(xx, yy, y_pred, cmap=plt.cm.RdYlBu, alpha=0.7)
    plt.scatter(X[:, 0], X[:, 1], c=y, s=40, cmap=plt.cm.RdYlBu)
    plt.xlim(xx.min(), xx.max())
    plt.ylim(yy.min(), yy.max())

# Plot decision boundaries for training and test sets
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.title("Train")
plot_decision_boundary(model_0, x_train, y_train)
plt.subplot(1, 2, 2)
plt.title("Test")
plot_decision_boundary(model_0, x_test, y_test)

