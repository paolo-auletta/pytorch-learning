# -*- coding: utf-8 -*-
"""02 Multilcass.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BINU6QsqbITv-5ZkIa7C3qsGlnjKJ5Ln

# Creating the dataset
"""

## 1. Creating a toy multi-class dataset
import torch
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report

# Set the hyperparameters for data creation
n_samples = 1000
n_class = 4
n_features = 2
random_seed = 51

# Create multi-class data
x_blob, y_blob = make_blobs(n_samples = n_samples,
                            n_features = n_features,
                            centers = n_class,
                            cluster_std = 1.8,
                            random_state = random_seed) # keep random state so we get the same values

# Turn data into tensors
x_blob = torch.from_numpy(x_blob).type(torch.float)
y_blob = torch.from_numpy(y_blob).type(torch.LongTensor) # For cross entropy loss it is required to set the target parameter datatype to Long

# Split into training and testing
x_train, x_test, y_train, y_test = train_test_split(x_blob,
                                                    y_blob,
                                                    test_size = 0.20, # 20% will be test data and 80% will be train data
                                                    random_state = random_seed)

# Visualize
import matplotlib.pyplot as plt

def plot_predictions(x, y, title):
    """
    This function plots the model's predictions on the test data.
    """

    # Plotting predictions
    plt.figure(figsize=(10, 8))  # Set the figure size for better readability

    # Scatter plot for testing data predictions
    plt.scatter(
        x = x[:, 0],
        y = x[:, 1],
        c = y,
        cmap = plt.cm.coolwarm,
        edgecolor = 'w',
        linewidth = 1,
        s = 70,
        alpha = 0.6,
        label = "Test Predictions",
    )

    # Add a colorbar for predicted labels
    colorbar = plt.colorbar()
    colorbar.set_label(title, fontsize=12)
    colorbar.ax.tick_params(labelsize=10)

    # Titles and labels
    plt.title(title, fontsize=14)
    plt.xlabel("Feature 1", fontsize=12)
    plt.ylabel("Feature 2", fontsize=12)

    # Add legend
    plt.legend(loc="upper right")

    # Show the plot
    plt.tight_layout()
    plt.show()

# Plot the data
plot_predictions(x_blob, y_blob, "Dataset")

"""# Building the Model"""

# 2. Building Model

# Let's build a model to classify our blue and red dots.
# To do so, we want to:
  # 1. Setup device agonistic code so our code will run on an accelerator (GPU) if there is one
  # 2. Construct a model (by subclassing nn .Module)
  # 3. Define a loss function and optimizer
  # 4. Create a training and test loop


# 2,1 Setup device agonistic code
# Import PyTorch and nn
import torch
from torch import nn

# Make device agnostic code
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
device

# Creating the model using nn.Sequential()

class BlobModel(nn.Module):

  def __init__(self, in_features, out_features, hidden_units = 8):
    """Initializes multi-class classification model.

    Args:
      input_features (int): Number of input features to the model
      output_features (int): Number of outputs features (number of output classes)
      hidden_units (int): Number of hidden units between layers, default 8

    Returns:

    Example:
    """

    super().__init__()
    self.linear_layer_stack = nn.Sequential(
        nn.Linear(in_features = in_features, out_features = hidden_units),
        nn.ReLU(),
        nn.Linear(in_features = hidden_units, out_features = hidden_units),
        nn.ReLU(),
        nn.Linear(in_features = hidden_units, out_features = out_features)
    ).to(device)

  def forward(self, x):
    return self.linear_layer_stack(x)

# Create an instance of BlobModel and send it to target device

model_0 = BlobModel(2, 4, 8).to(device) # Send it to target device

model_0

"""### Loss Function, Accuracy Function and Optimizer"""

# 2.1 Loss function, optimizer and accuracy function

# CrossEntropyLoss is the standard for multi-class classification, can be useful also when you have an imbalanced dataset (weight parameter)
loss_fn = nn.CrossEntropyLoss()

# Create an optimizer
optimizer = torch.optim.Adam(params = model_0.parameters(),
                             lr = 0.1)

# Accuracy function
def accuracy_fn(y_true, y_pred):
    correct = torch.eq(y_true, y_pred).sum().item() # torch.eq() calculates where two tensors are equal
    acc = (correct / len(y_pred)) * 100
    return acc

"""### Training Loop"""

# 1. Track loss and accuracy during training
train_losses = []
test_losses = []

train_accuracies = []
test_accuracies = []

total_epochs = []

# Set the number of epochs
epochs = 100

# Put data to target device
x_train, y_train = x_train.to(device), y_train.to(device)
x_test, y_test = x_test.to(device), y_test.to(device)

# Build training and evaluation loop
for epoch in range(epochs):
    total_epochs.append(epoch)
    ### Training
    model_0.train()

    # 1. Forward pass (model outputs raw logits)
    y_logits = model_0(x_train)
    y_preds = torch.softmax(y_logits, dim = 1).argmax(dim = 1)

    # 2. Calculate loss
    loss = loss_fn(y_logits, y_train) # Between the logits and the features
    acc = accuracy_fn(y_true = y_train, y_pred = y_preds)

    # Save training loss and accuracy
    train_losses.append(loss.item())
    train_accuracies.append(acc)

    # 3. Optimizer zero grad
    optimizer.zero_grad()

    # 4. Loss backwards
    loss.backward()

    # 5. Optimizer step
    optimizer.step()

    ### Testing
    model_0.eval()
    with torch.inference_mode():
        # 1. Forward pass
        test_logits = model_0(x_test)
        test_preds = torch.softmax(test_logits, dim = 1).argmax(dim = 1)

        # 2. Caculate loss/accuracy
        test_loss = loss_fn(test_logits, y_test)
        test_acc = accuracy_fn(y_true = y_test,
                               y_pred = test_preds)

        # Save test loss and accuracy
        test_losses.append(test_loss.item())
        test_accuracies.append(test_acc)

    # Print out what's happening every 10 epochs
    if epoch % 10 == 0:
        print(f"Epoch: {epoch} | Loss: {loss:.5f}, Accuracy: {acc:.2f}% | Test loss: {test_loss:.5f}, Test acc: {test_acc:.2f}%")

"""# Evaluation"""

# 2. Plotting the loss and accuracy over epochs in a style similar to the provided example
plt.figure(figsize=(14, 8))

# Plot loss over epochs
plt.subplot(1, 2, 1)
plt.plot(range(len(total_epochs)), train_losses, color='lightblue', linestyle='-', linewidth=1, alpha=0.8, label="Train Loss")
plt.plot(range(len(total_epochs)), test_losses, color='steelblue', linestyle='-', linewidth=1, alpha=0.8, label="Test Loss")
plt.title("Loss Over Epochs", fontsize=16)
plt.xlabel("Epochs", fontsize=14)
plt.ylabel("Loss", fontsize=14)
plt.legend()
plt.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.3)

# Plot accuracy over epochs
plt.subplot(1, 2, 2)
plt.plot(range(len(total_epochs)), train_accuracies, color='lightcoral', linestyle='-', linewidth=1, alpha=0.8, label="Train Accuracy")
plt.plot(range(len(total_epochs)), test_accuracies, color='tomato', linestyle='-', linewidth=1, alpha=0.8, label="Test Accuracy")
plt.title("Accuracy Over Epochs", fontsize=16)
plt.xlabel("Epochs", fontsize=14)
plt.ylabel("Accuracy (%)", fontsize=14)
plt.legend()
plt.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.3)

# Add tight layout for better spacing
plt.tight_layout()

# Show the plots
plt.show()

# 3.3 Make predictions and evaluate the model

import requests
from pathlib import Path

# Download helper functions from Learn Pytorch repo
if Path("helper_function.py").is_file():
  print("helper_function.py already exists, skipping download")
else:
  print("Download helper_function.py")
  request = requests.get("https://raw.githubusercontent.com/mrdbourke/pytorch-deep-learning/refs/heads/main/helper_functions.py")
  with open("helper_functions.py", "wb") as f:
    f.write(request.content)

from helper_functions import plot_predictions, plot_decision_boundary

# Plot decision boundary of the model
plt.figure(figsize = (12, 6))
plt.subplot(1, 2, 1)
plt.title("Train")
plot_decision_boundary(model_0, x_train, y_train)

plt.subplot(1, 2, 2)
plt.title("Test")
plot_decision_boundary(model_0, x_test, y_test)

# Forward pass in inference mode
with torch.inference_mode():
    # Ensure x_test is on the correct device before using it
    test_logits = model_0(x_test)
    test_preds = torch.softmax(test_logits, dim = 1).argmax(dim = 1)

    # Plotting predictions
    plt.figure(figsize=(12, 10))  # Set the figure size for better readability

    # Scatter plot for training data
    plt.scatter(
        x = x_train[:, 0].cpu().numpy(),
        y = x_train[:, 1].cpu().numpy(),
        c = y_train.cpu().numpy(),
        cmap = 'coolwarm',
        alpha = 0.2,
        s = 50,
        label = "Training Data",
    )

    # Scatter plot for testing data predictions
    plt.scatter(
        x = x_test[:, 0].cpu().numpy(),
        y = x_test[:, 1].cpu().numpy(),
        c = test_preds.squeeze().cpu().numpy(),
        cmap = 'coolwarm',
        edgecolor = 'w',
        linewidth = 1,
        s = 70,
        alpha = 1,
        label = "Test Predictions",
    )

    # Add a colorbar for predicted labels
    colorbar = plt.colorbar()
    colorbar.set_label("Predicted Label", fontsize=12)
    colorbar.ax.tick_params(labelsize=10)

    # Titles and labels
    plt.title("Model Predictions on Training and Testing Data", fontsize = 14)
    plt.xlabel("Feature 1", fontsize = 12)
    plt.ylabel("Feature 2", fontsize = 12)

    # Add legend
    plt.legend(loc = "upper right")

    # Show the plot
    plt.tight_layout()
    plt.show()

# More metrics

target_names = ['class 0', 'class 1', 'class 2', 'class 3']

classification_report(y_true = y_test.cpu().numpy(),
                      y_pred = test_preds.cpu().numpy(),
                      target_names = target_names,
                      output_dict = True)